<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>段落与文本环境</title>
    <url>/post/LaTeX-paragraph-and-text-environment/</url>
    <content><![CDATA[<h2 id="分段">分段</h2>
<h3 id="段首缩进">段首缩进</h3>
<p><span class="math inline">\(\LaTeX\)</span>中使用<strong>空行</strong>或者<code>\par</code>命令来分段。每个自然段第一行有一个固定的缩进，可以由长度变量<code>\parindent</code>控制。在西文标准文档类（如article）中，<strong>每个章节的第一段</strong>是<strong>不缩进</strong>的，但可以使用indentfirst宏包启用它；而中文文档类（如ctexart）则每段缩进，并自动设置段落缩进为两个汉字宽。</p>
<p>要临时禁用缩进，可在段前使用<code>\noindent</code>命令；或者想要在本来没有缩进的地方使用缩进，可以用<code>\indent</code>命令产生。</p>
<h3 id="段间距离">段间距离</h3>
<p>段与段间的垂直距离由长度变量<code>\parskip</code>控制。其默认值是橡皮长度<code>0 pt plus 1 pt</code>，在中文排版中常使用</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\setlength</span>&#123;<span class="keyword">\parskip</span>&#125;&#123;0 pt&#125;</span><br></pre></td></tr></table></figure>
<p>把段间距定义为固定长度，禁止段落间距离伸长。当然也可以设置较大的<code>\parskip</code>使得分段更清晰。</p>
<h3 id="对齐方式">对齐方式</h3>
<p><span class="math inline">\(\LaTeX\)</span>的段落默认是两端均匀对齐的，也可以改为左对齐，右对齐或居中格式。设置命令如下：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\raggedright</span> <span class="comment">% 设置段落左对齐 ragged right意味着右边界参差不齐</span></span><br><span class="line"><span class="keyword">\raggedleft</span> <span class="comment">% 设置段落右对齐 常常用于排版签名、日期、格言警句等</span></span><br><span class="line"><span class="keyword">\centering</span> <span class="comment">% 设置段落居中对齐 可用于强调段落</span></span><br></pre></td></tr></table></figure>
<p>除此之外，也可以使用环境flushleft、flushright、center分别表示左对齐、右对齐、居中。<strong>这几个环境会在段落前后增加一小段垂直间距以示强调</strong>，但它们不会影响前后的文字，因此比<code>\raggedright</code>等命令更常用一些。</p>
<h3 id="断词">断词</h3>
<p>在默认的段落设置下，<span class="math inline">\(\LaTeX\)</span>可能会在单词的<strong>两个音节中间断行</strong>，并在前一行末尾<strong>加上连字符</strong>，即所谓<strong>断词</strong>（用连字号连接，hyphenation）。一般来说，<span class="math inline">\(\TeX\)</span>能很好的处理断词。如果有需要，也可以自己使用<code>\-</code>命令指明可能的断点，如<code>man\-u\-script</code>。还可以使用<code>\hyphenation</code>命令在导言区全局地设置断点列表，如：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\hyphenation</span>&#123;man-u-script com-pu-ter gym-na-sium&#125;</span><br></pre></td></tr></table></figure>
<p><strong>断词只在均匀对齐地段落中起作用，左对齐的段落就没有断词。</strong>使用<code>\sloppy</code>命令可以允许段落中更大的空格，从而<strong>禁用断词</strong>功能；与之相对的命令是<code>\fussy</code>，让段落恢复默认的较严格的间距。更多地是使用等效的sloppypar环境，把允许更宽松间距的文本放在环境中。</p>
<h4 id="其他断词方式">其他断词方式</h4>
<p>以<code>none</code>选项使用hyphenat宏包可以更好地禁用断词。而ragged2e宏包则可以在左对齐（<code>\RaggedRight</code>）、右对齐（<code>\RaggedLeft</code>）或居中（<code>\Centering</code>）的段落中使用断词，这样可以得到更合理的段落。ragged2e宏包还提供<code>\justifying</code>命令回到均匀对齐的段落，以及对应的Center、FlushLeft、FlushRight、justify环境，作为标准<span class="math inline">\(\LaTeX\)</span>命令和环境的补充。</p>
<h3 id="段落宽度">段落宽度</h3>
<p>可以使用长度变量<code>\leftskip</code>和<code>rightskip</code>来控制段落的宽度，如果是局部修改，注意把整个段落放在一个分组里面，或定义为单独的环境。例如：</p>
<p><img src="/post/LaTeX-paragraph-and-text-environment/latex_parwidth.jpg"></p>
<h3 id="特殊段落">特殊段落</h3>
<p>较为常用的一种特殊段落是“悬挂缩进”，它可以由命令<code>\hangafter</code>和<code>hangindent</code>控制，例如：</p>
<p><img src="/post/LaTeX-paragraph-and-text-environment/latex_hang_indent.jpg"></p>
<p>正的<code>\hangindent</code>作用于段落左侧，负的<code>\hangindent</code>作用于段落右侧；正的<code>\hangafter</code>作用于段落的 <span class="math inline">\(n\)</span> 行之后，负的<code>\hangafter</code>作用于段落的前 <span class="math inline">\(n\)</span> 行。<strong>两者均只对当前段起作用</strong>。</p>
<p><code>\lettrine</code>宏包利用特殊的段落形状产生<strong>首字下沉</strong>的效果，例如</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 导言区使用 \usepackage&#123;lettrine&#125;</span></span><br><span class="line"><span class="keyword">\lettrine</span>&#123;孔&#125;&#123;&#125;乙己喝过半碗酒，涨红的脸色渐渐复了原，旁人便又问道，“孔乙己，你当真认识字么？”孔乙己看着问他的人，显出不屑置辩的神气。他们便接着说道，“你怎的连半个秀才也捞不到呢？”孔乙己立刻显出颓唐不安模样，脸上笼上了一层灰色，嘴里说些话；这回可是全是之乎者也之类，一些不懂了。在这时候，众人也都哄笑起来：店内外充满了快活的空气。</span><br></pre></td></tr></table></figure>
<p>将产生</p>
<p><img src="/post/LaTeX-paragraph-and-text-environment/latex_lettrine.jpg"></p>
<p>shapepar宏包预定义了一些段落形状，可以方便的排出一些有趣的效果，例如<code>\heartpar</code>命令将产生心形的段落：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 导言区 \usepackage&#123;shapepar&#125;</span></span><br><span class="line"><span class="keyword">\heartpar</span>&#123;<span class="comment">%</span></span><br><span class="line">八月秋高风怒号，卷我屋上三重茅。茅飞渡江洒江郊，高者挂罥长林梢，下者飘转沉塘坳。南村群童欺我老无力，忍能对面为盗贼。公然抱茅入竹去，唇焦口燥呼不得，归来倚杖自叹息。俄顷风定云墨色，秋天漠漠向昏黑。布衾多年冷似铁，娇儿恶卧踏里裂。床头屋漏无干处，雨脚如麻未断绝。自经丧乱少睡眠，长夜沾湿何由彻？安得广厦千万间，大庇天下寒士俱欢颜！风雨不动安如山。呜呼！何时眼前突兀见此屋，吾庐独破受冻死亦足！</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将产生</p>
<p><img src="/post/LaTeX-paragraph-and-text-environment/latex_heartpar.jpg"></p>
]]></content>
      <categories>
        <category>Code</category>
        <category>LaTeX</category>
      </categories>
      <tags>
        <tag>LaTeX</tag>
        <tag>Typesetting</tag>
      </tags>
  </entry>
  <entry>
    <title>git submodules 实践</title>
    <url>/post/git-submodules-practice/</url>
    <content><![CDATA[<p>最近用git管理项目，涉及到了 submodule。submodule 简单来说就是在一个git仓库中包含的子 git 仓库，想要同时维护好这两个互为父子关系的 git 仓库并不容易，很容易出岔子且令人困惑。</p>
<p> </p>
<p>举例来说，假设有一个名叫 <code>parent</code> 的 git 仓库，里面有一些文件夹和文件，其中 <code>child/</code> 文件夹本身也是一个 git 仓库。下面两者分别称为父仓库/子仓库。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parent&#x2F;</span><br><span class="line">  .git&#x2F;</span><br><span class="line">  child&#x2F;</span><br><span class="line">    .git&#x2F;</span><br><span class="line">    file1</span><br><span class="line">  dir1&#x2F;</span><br><span class="line">  file2</span><br><span class="line">  .gitmodules</span><br></pre></td></tr></table></figure>
<p>现在远程仓库的<code>master</code>分支有一些改动，父子仓库均有涉及，我们想要<code>pull</code>到本地。按照常规的操作<code>git pull origin master</code>将只会更新父仓库的内容，而不会更新子仓库的内容。这是因为父仓库只记录了子仓库的 commit ID，而不会跟踪其内容。当执行<code>pull</code>操作时也只会更新其指向的子仓库的 commit ID。</p>
<p>要实际更新子仓库的内容，还需要（在父仓库中）执行<code>git submodule update</code>命令。</p>
<div class="note info flat"><div class="hide-block">
<button type="button" class="hide-button" style>
展开详细说明
</button>
<div class="hide-content">
<p>
父仓库在其 .git 中记录子仓库的commit ID，并通过文件<code>.gitmodules</code>记录子仓库的 URL 和 相对路径： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[submodule &quot;child&quot;]</span><br><span class="line">	path &#x3D; child</span><br><span class="line">	url &#x3D; url_to_child_remote</span><br></pre></td></tr></table></figure> 其中，URL 和 commit ID 两者唯一确定了子仓库的状态（或者说内容）。因此父仓库只记录子仓库的commit ID 是充分的。
</p>
<p>
pull 操作会更新 .git 中记录的子仓库的 commit ID，这将导致仓库的实际 commit ID 与 .git 所存储的不同，表现为<code>git status</code>命令将显示子仓库<code>child</code>已修改（modified）。
</p>
<p>
<code>git submodule update</code>命令首先通过父仓库所记录的相对路径进入子仓库里面，然后再根据父仓库所记录子仓库的 URL 和 commit ID 从远程拉取目标版本。
</p>
</div>
</div>
</div>
<p> </p>
<p>其它的同步命令如<code>clone/pull/push</code>等以及<code>checkout/reset</code>等会更改本地仓库内容的命令在涉及到 submodules 时都是同样的原理，直接在父仓库中执行这些命令会产生令人困惑的结果。</p>
<p>例如，<code>clone</code>命令也只会将子仓库的 commit ID 复制下来，而不会复制子仓库本身。因此，当 clone 完成后，<code>child/</code>只是一个空目录，里面什么也没有。与 pull 时的情况不同的是，这时因为子仓库还没有初始化，需要首先执行<code>git submodule init</code>，然后再执行<code>git submodule update</code>，或者合并为一个命令<code>git submodule update --init</code>。</p>
<p>可以通过在这些命令中指定<code>--recurse-submodules</code>项（Git 2.14+），来自动更新子仓库，而不用在命令后再执行<code>git submodule update</code>。 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git pull origin master --recurse-submodules</span><br></pre></td></tr></table></figure> 目前支持这个选项的命令包括<code>read-tree/checkout/reset/grep/clone/pull/push</code>。</p>
<p>要自动为这些命令指定此项，可以设置<code>submodule.recurse</code>： <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global submodule.recurse <span class="literal">true</span></span></span><br></pre></td></tr></table></figure> 但需要注意的是，即使完成了这个设置，<code>clone</code>操作仍需显式地指定<code>--recurse-submodules</code>。</p>
<div class="note warning flat"><p>若主操作未正常完成，将不会再自动执行子仓库的更新（即使 commit ID 已经正常更新了）。一种常见的情况是，pull 操作时因为冲突无法合并导致的命令执行失败。</p>
<p>因此有理由认为下面两个命令等价</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git pull origin master --recurse-submodules</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull origin master &amp;&amp; git submodule update --init  <span class="comment"># &amp;&amp; 运算符意味着后面的命令的执行依赖于前面的命令的成功执行</span></span></span><br></pre></td></tr></table></figure>
</div>
<p>参考：<a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules">Git-Submodules</a></p>
]]></content>
      <categories>
        <category>Code</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>在类方法上应用基于类的装饰器时发生错误：missing 1 required positional argument</title>
    <url>/post/python-class-based-descriptor-applied-to-method/</url>
    <content><![CDATA[<div class="note info flat"><p>如果你对装饰器还知之甚少，可以移步这篇文章: <a href="../python-decorator">Python 装饰器</a>.</p>
</div>
<h2 id="两种风格的装饰器">两种风格的装饰器</h2>
<p>当我需要一个计时器来计算我的程序执行用时时，我想到了装饰器。<del>本着少造轮子的原则</del>，我Google了一下，发现了如下两种不一样的装饰器写法：</p>
<div class="tabs" id="decorators-1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#decorators-1-1">基于函数的装饰器</button></li><li class="tab"><button type="button" data-href="#decorators-1-2">基于类的装饰器</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="decorators-1-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        t1 = time.time()</span><br><span class="line">        ret = func(*args, **kwargs)</span><br><span class="line">        t2 = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;time consumed: <span class="subst">&#123;t2-t1&#125;</span>s&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="decorators-1-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">timer</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, func</span>):</span></span><br><span class="line">        self.f = func</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        t1 = time.time()</span><br><span class="line">        ret = self.f(*args, **kwargs)</span><br><span class="line">        t2 = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;time consumed: <span class="subst">&#123;t2-t1&#125;</span>s&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<p>无论使用上面那种方式，当我们想要对函数<code>func</code>计时时，只需要在定义该函数时加上<code>@timer</code>。例如 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">sec</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;You need to wait <span class="subst">&#123;sec&#125;</span>second(s)&#x27;</span>)</span><br><span class="line">    time.sleep(sec)  <span class="comment"># import time first</span></span><br></pre></td></tr></table></figure> 我们知道，<code>@</code>语法只是python的一个语法糖，这等价于 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">sec</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;You need to wait <span class="subst">&#123;sec&#125;</span>second(s)&#x27;</span>)</span><br><span class="line">    time.sleep(sec)</span><br><span class="line">func = timer(func)</span><br></pre></td></tr></table></figure> 让我们看看对上述两种写法，当我们调用<code>func</code>时，实际上是在做什么：</p>
<ul>
<li><p>基于函数的装饰器</p>
<blockquote>
<p>这时<code>timer</code>是一个函数</p>
</blockquote>
<p>经过<code>func = timer(func)</code>, <code>func</code>实际上已经变成了<code>timer</code>的返回值：<code>wrapper</code>。</p>
<p>而<code>wrapper</code>将传入的所有参数<code>*args, **kwargs</code>全部传给了<code>func</code>并将其返回值返回，做了所有原本<code>func</code>要做的事情。但除此之外，还在<code>func</code>运行前后分别打了时间戳，以计算<code>func</code>运行的时间。</p>
<p>因此，当我们这时再调用<code>func</code>时，除了做原本该做事情外，还会输出运行时间: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">2</span>)  <span class="comment"># 即 wrapper(2)</span></span><br><span class="line">You need to wait 2second(s)</span><br><span class="line">time consumed: <span class="number">2.008380889892578</span>s</span><br></pre></td></tr></table></figure></p></li>
<li><p>基于类的装饰器</p>
<blockquote>
<p>这时<code>timer</code>是一个类。</p>
</blockquote>
<p>经过<code>func = timer(func)</code>, <code>func</code>实际上已经变成了<code>timer</code>类的一个实例。 为避免混淆，我们为这个实例另取一个名字<code>a</code>。<code>a</code>包含属性<code>f</code>, 其值被初始化为<code>func</code>。</p>
<p><code>timer</code>类定义了<code>__call__</code>方法，定义了该方法的类的实例可以像函数一样调用(See <a href="https://docs.python.org/3/reference/datamodel.html#emulating-callable-objects">Python docs</a>)。例如，我们可以调用<code>a(*args, **kwargs)</code>, 这使得<code>a</code>看起来就像一个函数。实际上这会被转换成<code>timer.__call__(a, *args, **kwargs)</code>。</p>
<p>而"函数"<code>a</code>做了与前面的函数<code>wrapper</code>几乎相同的事情：将传入的所有参数<code>*args, **kwargs</code>全部传给了<code>a.f</code>(即<code>func</code>)并将其返回值返回，并在<code>a.f</code>调用前后打上了时间戳。</p>
<p>因此，当我们这时再调用<code>func</code>时，会达到与基于函数的装饰器相同的效果: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">3</span>)  <span class="comment"># 即 a(3)</span></span><br><span class="line">You need to wait 3second(s)</span><br><span class="line">time consumed: <span class="number">3.0074422359466553</span>s</span><br></pre></td></tr></table></figure></p></li>
</ul>
<p>可见，两种装饰器虽然写起来不同，表现出的行为却几乎一模一样，也产生了相同的效果。</p>
<h2 id="意外发生了">意外发生了！</h2>
<p>前面两种装饰器对于普通函数的作用几乎没有区别，但我也想对我的类方法使用这些装饰器： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">    @timer</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span>(<span class="params">self, sec</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;You need to wait <span class="subst">&#123;sec&#125;</span>second(s)&#x27;</span>)</span><br><span class="line">        time.sleep(sec)  <span class="comment"># import time first</span></span><br></pre></td></tr></table></figure> 如果使用基于函数的装饰器，仍然可以正确地计算方法<code>method</code>的运行时间： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = SomeClass()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.method(<span class="number">2</span>)</span><br><span class="line">You need to wait 2second(s)</span><br><span class="line">time consumed: <span class="number">2.0113697052001953</span>s</span><br></pre></td></tr></table></figure> 然而如果我们使用的是基于类的装饰器, 意外发生了： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = SomeClass()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.method(<span class="number">2</span>)</span><br><span class="line">TypeError: method() missing <span class="number">1</span> required positional argument: <span class="string">&#x27;sec&#x27;</span></span><br></pre></td></tr></table></figure></p>
<p>为什么装饰在函数时上两者效果相同，但装饰在类方法上却产生了差异？ 如果我们从装饰器的原理出发，很容易明白这里究竟发生了什么。上面的类定义等同于 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, sec</span>):</span></span><br><span class="line">        self.sec = sec</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span>(<span class="params">self</span>):</span></span><br><span class="line">        time.sleep(self.sec)</span><br><span class="line">    method = timer(method)</span><br></pre></td></tr></table></figure> 当我们创建一个该类的实例，并调用方法</p>
<div class="note info flat"><p>This article has not finished yet.</p>
</div>
]]></content>
      <categories>
        <category>Code</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Decorator</tag>
        <tag>Descriptor</tag>
      </tags>
  </entry>
  <entry>
    <title>Python装饰器</title>
    <url>/post/python-decorator/</url>
    <content><![CDATA[<h2 id="从程序计时器说起">从程序计时器说起</h2>
<p>当我们想要计算一个程序的执行时间时，也许会写这样一个简单的程序计时器： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">t1 = time.time()</span><br><span class="line">func1()</span><br><span class="line">func2()</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line">t2 = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;time consumed: <span class="subst">&#123;t2-t1&#125;</span>s&quot;</span>)</span><br></pre></td></tr></table></figure> 它的好处是简单易操作，<del>有手就行</del> ， 可以一次计算多个函数的总执行时间。但它的缺点也很明显，每次想计算某个函数的运行时间时，都得重复这几行代码。 然而，重复“函数调用时应该执行的操作”正是装饰器（decorator）派上用的地方。</p>
<p>下面是一个程序计时器的装饰器实现： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        t1 = time.time()</span><br><span class="line">        ret = func(*args, **kwargs)</span><br><span class="line">        t2 = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;time consumed: <span class="subst">&#123;t2-t1&#125;</span>s&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure> 它有几个明显的特征：（1）它是一个函数；（2）它以一个函数为参数；（2）它返回一个函数。</p>
<p>当我们想要对函数<code>func</code>计时时，只需要使用<code>@</code>语法在定义该函数时加上<code>@timer</code>。例如 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wait</span>(<span class="params">sec</span>):</span></span><br><span class="line">    time.sleep(sec)</span><br></pre></td></tr></table></figure> 这样每当我们调用函数<code>wait</code>, 都会自动输出其执行时间： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wait(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"><span class="comment"># time consumed: 3.0031869411468506s</span></span><br></pre></td></tr></table></figure></p>
<h2 id="装饰器是如何工作的">装饰器是如何工作的</h2>
<p>当我们对一个函数使用装饰器时，实际上发生了什么？</p>
<p>实际上，<code>@</code>语法只是一个语法糖，下面的写法 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure> 完全等同于： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">func = decorator(func)</span><br></pre></td></tr></table></figure> 也就是说，当我们调用<code>func</code>时，实际上已经不是我们当初定义的<code>func</code>了，它变成了由<code>decorator</code>返回的函数，在前面计时器的例子中，就是<code>wrapper</code>。到这里，我们更能理解前面提到的装饰器的几个明显特征：它本身是一个函数，以函数为参数，并返回一个函数。</p>
<p>可以看到，<code>wrapper</code>函数几乎做了与<code>func</code>函数一样的事情: 它们都以<code>(*args, **kwargs)</code>为参数，执行<code>func</code>函数要执行的任务，并返回相同的值<code>ret</code>。不同的是，在<code>wrapper</code>中，在执行<code>func</code>函数前后计算了<code>func</code>函数的运行时间。</p>
<p>这正是装饰器该做的事情：在原有函数功能的基础上，增加一些新的功能，<strong>但不用对原来的函数体做任何修改</strong>。</p>
<h2 id="必须是函数吗">必须是函数吗？</h2>
<p>上面的介绍也许已经够用了，但我们或许还想一探究竟。</p>
<p>从<code>@</code>语法糖的等效表达式就能知道，装饰器<code>decorator</code>并非必须是函数。实际上，只要表达式<code>func = decorator(func)</code>能够执行，并且返回的<code>func</code>对象的调用接口与原先定义的<code>func</code>函数一样就行了。</p>
<p>我们看如下的类定义，它也可以作为装饰器，显然它不是函数： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">decorator</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, func</span>):</span></span><br><span class="line">        self.func = func</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># do something</span></span><br><span class="line">        ret = self.func(*args, **kwargs)</span><br><span class="line">        <span class="comment"># do something</span></span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure> 同样地，用<code>@</code>符号将它放在想要被装饰的函数的定义上方： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure> 再次强调，这等价于 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">func = decorator(func)</span><br></pre></td></tr></table></figure> 我们看看这将会发生什么。<code>func = decorator(func)</code>将<code>func</code>作为类构造参数，并将实例化的对象赋给<code>func</code>, 即现在<code>func</code>已经变成了<code>decorator</code>类的一个实例。因为这个类实现了<code>__call__</code>方法，这个类的实例将是可调用的，行为与函数几乎没有区别，我们仍然可以调用<code>func(*args, **kwargs)</code>（实际上这会被转化为<code>func.__call__(*args, **kwargs)</code>）。</p>
<p>富有想象力的你，或许能够想到其它的装饰器实现方式:)</p>
<p>(完)</p>
]]></content>
      <categories>
        <category>Code</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Decorator</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下SSH远程连接免密登录</title>
    <url>/post/ssh-password-free/</url>
    <content><![CDATA[<h2 id="step1-生成ssh密钥">Step1: 生成SSH密钥</h2>
<div class="note warning flat"><p>如果你的用户目录（<code>C:\Users\xxxxxx\</code>）下的<code>.ssh</code>文件夹内已经有<code>id_rsa</code>文件，你可能曾经生成过密钥了，可以跳过这一步。</p>
</div>
<p>打开cmd，输入如下命令： <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure> 然后它会提示你将要生成的密钥文件放在什么位置等等，不用管，一路按回车就好。</p>
<h2 id="step2-将生成的公钥上传到远程服务器上">Step2: 将生成的公钥上传到远程服务器上</h2>
<p>将刚才生成的<code>id_rsa.pub</code>文件的内容写入服务器上的<code>~/.ssh/authorized_keys</code>文件中。</p>
<p>你可以手动复制过去，也可以可以在cmd里输入如下命令来完成： <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span> <span class="variable">%USERPROFILE%</span>\.ssh\id_rsa.pub | ssh &#123;USER&#125;@&#123;HOST&#125; -p &#123;PORT&#125; &quot;<span class="built_in">mkdir</span> -p ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys&quot;</span><br></pre></td></tr></table></figure> 注意分别将命令中的<code>&#123;USER&#125;</code>, <code>&#123;HOST&#125;</code>, <code>&#123;PORT&#125;</code>替换为<mark class="hl-label default">你的用户名</mark> 、 <mark class="hl-label default">服务器的IP地址</mark> 、<mark class="hl-label default">服务器的端口号</mark> （如果你不知道端口号，那么可能是默认的<code>22</code>）。</p>
<p>输入命令后回车并输入你在服务器上的密码，<strong>输入密码是看不到回显的</strong>，输入完回车就好。如果你没有看到任何输出，则说明设置成功了。</p>
]]></content>
      <categories>
        <category>Code</category>
        <category>Misc</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>torch.Tensor是可哈希的！</title>
    <url>/post/torch-tensor-is-hashable/</url>
    <content><![CDATA[<h2 id="问题的由来">问题的由来</h2>
<p>注意到这个问题是因为我把一段正确的代码 “优化”成了类似下面的代码： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">some_dict = &#123;<span class="number">1</span>: <span class="string">&#x27;one&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;two&#x27;</span>&#125;</span><br><span class="line">some_tensor = torch.tensor([<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> some_tensor:</span><br><span class="line">    <span class="keyword">if</span> e <span class="keyword">in</span> some_dict:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Yes!&quot;</span>)</span><br></pre></td></tr></table></figure> 结果导致了意料之外的结果，什么也没有输出。</p>
<p>咋一看有些出乎意料？的确！在找 bug 时我根本没觉得这里会有什么问题，以至于找了很久很久 <del>（一个多星期）</del>。</p>
<h2 id="发生了什么">发生了什么</h2>
<p>上面的结果意味着： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>torch.tensor(<span class="number">1</span>) <span class="keyword">in</span> &#123;<span class="number">1</span>: <span class="string">&#x27;one&#x27;</span>&#125;</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure> 那么可能有两个原因：（1）<code>torch.tensor(1)</code>的hash值不等于1（hash(1)==1）；（2）<code>torch.tensor(1)</code>的hash值等于1，但是<code>torch.tensor(1)</code>不等于1。这是Python判断一个对象是否在字典中的准则，即先比较hash值，再比较值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hash</span>(torch.tensor(<span class="number">1</span>)) == <span class="built_in">hash</span>(<span class="number">1</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>torch.tensor(<span class="number">1</span>) == <span class="number">1</span></span><br><span class="line">tensor(<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>经过简单的测试可以知道原因是前者，即<code>torch.tensor(1)</code>的hash值不等于1！</p>
<h2 id="为什么出乎意料">为什么出乎意料</h2>
<p>一方面，我觉得<code>torch.Tensor</code>可哈希的行为很奇怪，因为<code>list</code>和<code>np.ndarray</code>都是不可哈希的： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hash</span>([<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">TypeError: unhashable <span class="built_in">type</span>: <span class="string">&#x27;list&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hash</span>(np.array([<span class="number">1</span>, <span class="number">2</span>]))</span><br><span class="line">TypeError: unhashable <span class="built_in">type</span>: <span class="string">&#x27;numpy.ndarray&#x27;</span></span><br></pre></td></tr></table></figure></p>
<p>另一方面，即使<code>torch.Tensor</code>是可哈希的，我也以为<code>torch.tensor(1)</code>的哈希值应该等于1。</p>
<h2 id="一探究竟">一探究竟</h2>
<p>在仔细浏览了这个<a href="https://github.com/pytorch/pytorch/issues/7733">issue</a>之后，我大概明白了是怎么一回事：</p>
<ul>
<li>在PyTorch的源码中图方便使用了tensor作为字典的键；</li>
<li><code>hash(tensor)</code>简单地实现为<code>id(tensor)</code>。这种基于object的实现，而不是基于值的实现导致了期望之外的结果； <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = torch.tensor([<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hash</span>(t) == <span class="built_in">id</span>(t)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>这算是一个历史遗留问题，也有不少人讨论过移除tensor的可哈希行为，甚至准备好了<a href="https://github.com/pytorch/pytorch/pull/10625">PR</a>。但是开发者们考虑到这个更改可能造成比较大的影响，最终并未接受这个PR。</p>
]]></content>
      <categories>
        <category>Code</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Hash</tag>
        <tag>PyTorch</tag>
      </tags>
  </entry>
  <entry>
    <title>文字与符号</title>
    <url>/post/LaTeX-text-and-symbols/</url>
    <content><![CDATA[<h2 id="字斟句酌">字斟句酌</h2>
<h3 id="从字母表到单词">从字母表到单词</h3>
<p>我们常用的字母表包括扩展的拉丁字母、希腊字母和西里尔字母(Cyrillic alphabet)，这比标准键盘上所能直接输入的52个字母要多得多。不过不用担心，数以万计的汉字我们也搞定了，区区几个字母也不在话下。解决输入超过ASCII码范围的字母的问题有传统和现代两类方案。</p>
<p>现代的方案就是使用UTF-8编码直接输入。输入特殊的字母需要计算机键盘布局或输入法的支持。如果不方便使用特殊键盘来设置，操作系统或编辑器往往还提供了“字符映射表”一类的程序或插件，可以用鼠标选取一些字符输入。</p>
<p>显示ASCII以外的字母表需要编辑器所使用的字体的支持。并且<span class="math inline">\(\TeX\)</span>系统输出时所使用的字体也必须要能直接显示这些字母。</p>
<p>而传统的解决方案是使用特殊的命令，给字母加上重音的标记，使用特殊字母或者整体更换字母表。</p>
<p>重音是指加在字母上的标记。<span class="math inline">\(\LaTeX\)</span>支持的重音记号及其命令如表1：</p>
<p><img src="/post/LaTeX-text-and-symbols/latex_accents.jpg"></p>
<p>使用命令可以输入的<span class="math inline">\(\LaTeX\)</span>字母，见表2。其中<code>\ij</code> <code>\IJ</code> <code>\SS</code>是字母连写，在默认的字体中没有区别。</p>
<p><img src="/post/LaTeX-text-and-symbols/latex_special_letter.jpg"></p>
<p>如果还要输入希腊字母和西里尔字母，默认的字体就不够了，需要更换其他编码和字体。为此，<span class="math inline">\(\LaTeX\)</span>提供了babel宏包，可以方便同时访问多种语言的字母表。babel宏包可带有一个或多个语言的可选参数，支持不同的语言，如</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>[greek,english]&#123;babel&#125;</span><br></pre></td></tr></table></figure>
<p>将使用英语和希腊语，其中最后一个参数的英语是默认语言，此时希腊语就可以用ACSCII字符代替，如<code>\textgreek&#123;abcde&#125;</code>将输出<span class="math inline">\(\alpha\beta\varsigma\delta\varepsilon\)</span>。如果只有<code>greek</code>参数或将它放在最后，全文将默认使用希腊语。</p>
<h3 id="正确使用标点">正确使用标点</h3>
<p>在键盘上可以直接使用的标点符号有16种：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">, . ; : ! ? ‘ ’ ( ) [ ] - / * @</span><br></pre></td></tr></table></figure>
<p>标点<code>,.;:!?</code>用来分隔句子或部分句子，在每个标点之后应该加上空格，以保证正确的距离和换行。</p>
<p>引号在<span class="math inline">\(\LaTeX\)</span>中用‘和’两个符号表示。单引号用一遍，双引号就用两遍。符号’同时也是表示所有格和省字的撇号。</p>
<p>除了在数学模式中表示减号，符号<code>-</code>在<span class="math inline">\(\LaTeX\)</span>正文中也有多种用途：单独使用它是连字符；两个连用（<code>--</code>），是en dash，用来表示数字范围，如（2000--2020）；三个连用（<code>---</code>），是em dash，即破折号。不过，按照中文的写作习惯，表示数字范围也常使用符号<span class="math inline">\(\sim\)</span>（数学模式的符号$$），有时也用汉字的全角破折号或半个汉字破折号。</p>
<p>西文的省略号使用<code>\ldots</code>或<code>\dots</code>命令产生，相比直接输入三个句号，它所略微拉开的距离要合理得多：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">Good: One, two, three<span class="keyword">\ldots</span></span><br><span class="line"></span><br><span class="line">Bad: One, two, three...</span><br></pre></td></tr></table></figure>
<p><img src="/post/LaTeX-text-and-symbols/latex_ldots.jpg"></p>
<p>标准键盘上不能直接录入的标点符号有10个，它们占据了主键盘上面一排的一大半：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">~ # $ % ^ &amp; &#123; &#125; _ \</span><br></pre></td></tr></table></figure>
<p>它们都有特殊作用：数学模式符号<code>$</code>、注释符<code>%</code>、上标<code>^</code>、下标<code>_</code>、分组<code>&#123; &#125;</code>、宏命令<code>\</code>、带子<code>~</code>、<code>#</code>用在宏定义中，<code>&amp;</code>用于表格对齐。要在正文中使用这些符号，大部分是在前面加<code>\</code>，只有个别例外：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\~</span>&#123;&#125; <span class="keyword">\#</span> <span class="keyword">\$</span> <span class="keyword">\%</span> <span class="keyword">\^</span>&#123;&#125; <span class="keyword">\&amp;</span> <span class="keyword">\&#123;</span> <span class="keyword">\&#125;</span> <span class="keyword">\_</span> <span class="keyword">\textbackslash</span> <span class="comment">%与上面对应</span></span><br></pre></td></tr></table></figure>
<p>中文使用的标点与西文标点不同，中文写作使用全角标点。在科技文章中，为与数字、字母区分，中文的句号一般也使用一个小圆点表示，此时应该使用全角的“．”，而非混用西文句号。这个标点在大部分中文输入法可能不易输入，可以先统一使用句号“。”，最后统一替换。</p>
<h3 id="空格与换行">空格与换行</h3>
<h4 id="空格">空格</h4>
<p>文本中的空格起着分隔单词的作用，任意多个空格与一个空格的功能相同；只有字符后面的空格是有效的，每行最前面的空格则被忽略，这样有利于复杂代码的对齐；单个换行也被看做是一个空格。</p>
<p>以字母命名的宏，后面的空格会被忽略。如果要在命令后面使用空格，可以使用<code>\</code>，它表示两个普通单词间的空格距离；也可以在命令后加一个空的分组<code>&#123;&#125;</code>，有时也可以把命令用一个分组包裹起来。下面只有第一行得到的结果没有空格：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">Happy <span class="keyword">\TeX</span> ing.</span><br><span class="line">Happy <span class="keyword">\TeX</span><span class="keyword">\ </span>ing.</span><br><span class="line">Happy <span class="keyword">\TeX</span>&#123;&#125; ing. </span><br><span class="line">Happy &#123;<span class="keyword">\TeX</span>&#125; ing.</span><br></pre></td></tr></table></figure>
<p>有一种不可打断的空格，在<span class="math inline">\(\TeX\)</span>中被称为带子（ties），用<code>~</code>表示。<span class="math inline">\(\TeX\)</span>禁止在这种空格之间分行，因而可以用来表示一些不宜分开的情况。</p>
<p><span class="math inline">\(\LaTeX\)</span>把大写字母后的点看做缩写标记，把小写字母后的点看做句子结束，并对它们使用不同的间距。可以使用<code>\</code>指明是普通单词间的空格，或用<code>\@.</code>指明.大写字母后的句末。</p>
<p>汉字后的空格会被忽略。使用xelatex编译中文文档时，汉字和其他内容之间如果没有空格，xeCJK宏包会自动添加。个别时候需要忽略汉字和其他内容之间由xeCJK自动产生的空格，这时可以把汉字放进一个盒子里面。 <figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\mbox</span>&#123;条目&#125;-a不同于条目-b</span><br></pre></td></tr></table></figure></p>
<p>在空格中，最神奇的一种可能就是被称为幻影（phantom）的空格。幻影命令<code>\phantom</code>有一个参数，作用是产生与参数内容一样大小的空盒子。类似的有<code>\hphantom</code>和<code>\vphantom</code>, 分别表示水平方向和垂直方向的幻影（在另一个方向大小为零）。</p>
<h4 id="换行">换行</h4>
<p>空行，即用连续两个换行表示分段，段与段之间会自动得到合适的缩进。任意多个空行与一个空行的效果相同。</p>
<p>分段也可以用<code>\par</code>命令生成，这种用法一般只在命令或环境定义的内部使用，而普通行文中不宜出现。与连续的空行类似，连续的<code>\par</code>命令也只产生一次分段效果。</p>
<p>除了分段，也可以让<span class="math inline">\(\LaTeX\)</span>直接另起一行，并不分段。有两种相关命令：<code>\\</code>命令直接另起一行，上一行保持原来的样子；而<code>\linebreak</code>则指定一行的断点，上一行仍按完整一行散开对齐。<code>\\</code>命令可以带一个可选的长度参数，表示换行后增加的额外行距。如<code>\\[2cm]</code>。因此必须注意在命令<code>\\</code>后面如果确实需要使用方括号（即使括号在下一行），则应该在<code>\\</code>后面加空的分组以示分隔，否则会发生错误。</p>
<h2 id="特殊符号">特殊符号</h2>
<p>除了一般的文字，有时还需要使用一些特殊的符号，其中在正文中最为常用的如表3所示。</p>
<p><img src="/post/LaTeX-text-and-symbols/latex_special_symbol.jpg"></p>
<h2 id="字体">字体</h2>
<h3 id="字体的性质">字体的性质</h3>
<p>字体有五种基本的性质：字号（font size）、字体编码（font encoding）、字体族（font family）、字体形状（font shape）、字体系列（font series）。字号，即文字大小，常常被独立出来。看做不同于字体的单独的性质；字体编码，即字体包含的符号也较少直接设定。使用最多的是其它三种性质。</p>
<p><span class="math inline">\(\LaTeX\)</span>提供了带参数的命令和字体声明两类修改字体的命令，前者用于少量字体的更换，后者用于分组或环境中字体的整体更换。</p>
<p>预定义的字体族命令有3种：罗马字体族（roman family，默认）、无衬线字体族（sans serif family）和打字机字体族（typewriter family）。其命令为：</p>
<table>
<thead>
<tr class="header">
<th>字体族</th>
<th>带参数命令</th>
<th>声明命令</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>罗马</td>
<td>\textrm{}</td>
<td>\rmfamily</td>
<td><span class="math inline">\(\textrm{Roman font family}\)</span></td>
</tr>
<tr class="even">
<td>无衬线</td>
<td>\textsf{}</td>
<td>\sffamily</td>
<td><span class="math inline">\(\textsf{Sans serif font family}\)</span></td>
</tr>
<tr class="odd">
<td>打字机</td>
<td>\texttt{}</td>
<td>\ttfamily</td>
<td><span class="math inline">\(\texttt{Typewriter font family}\)</span></td>
</tr>
</tbody>
</table>
<p>预定义命令的字体形状有4种：直立形状（upright shape，也称为roman shape，默认）、意大利形状（italic shape）、倾斜形状（slanted shape）、小型大写形状（small capitals shape）。其命令为：</p>
<p><img src="/post/LaTeX-text-and-symbols/latex_font_shape.jpg"></p>
<p>注意其中倾斜形状和意大利形状的区别，倾斜形状差不多是直接对符号倾斜产生的，而通常所说的“斜体”往往是指意大利形状，它类似于圆滑的手写体。</p>
<p>预定义命令的字体系列有中等（medium，默认）和加宽加粗（bold extended）两类：</p>
<table>
<thead>
<tr class="header">
<th>字体系列</th>
<th>带参数命令</th>
<th>声明命令</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>中等</td>
<td>\textmd{}</td>
<td>\mdseries</td>
<td><span class="math inline">\(\textrm{Medium series}\)</span></td>
</tr>
<tr class="even">
<td>加宽加粗</td>
<td>\textbf{}</td>
<td>\bfseries</td>
<td><span class="math inline">\(\textbf{Bold extended series}\)</span></td>
</tr>
</tbody>
</table>
<p>字体的这三种性质有如确定字体的三维坐标，同一维度内的性质不能重叠，但不同类的性质可以叠加。</p>
<p>除了上面列举的命令，还有<code>\textnormal&#123;&#125;</code>和<code>normalfont</code>命令用来把字体设置为“普通”的格式。默认情况下，普通字体相当于<code>\rmfamily\mdseries\upshape</code>的效果。</p>
<p>使用斜体声明<code>\itshape</code> <code>\slshape</code>时，最后一个倾斜的字母会和后面的文字相距过紧，可以改用带参数的命令，或者使用<code>\/</code>命令 来进行倾斜校正，如<code>&#123;\itshape M\/&#125;M</code>。或者相反地，如果不需要<code>\textit</code>的倾斜校正，可以使用<code>\nocorr</code>命令禁止校正，如<code>\textit&#123;M\nocorr&#125;M</code>。</p>
<p>在ctex宏包下，中文字体可以简单的使用命令：<code>\songti</code>（宋体）、<code>\heiti</code>（黑体）、<code>\fangsong</code>（仿宋）、<code>kaishu</code>（楷书）。而且 按照上述定义英文字体的命令，中文字体也有与之对应的部分，如罗马字体族对应宋体，无衬线和打字机字体族分别对应幼圆和仿宋体，粗体对应黑体，意大利体对应楷体。</p>
<p><span class="math inline">\(\LaTeX\)</span>使用上述相互正交的几种性质来区分字体的方式，称为新字体选择方案（New Font Selection Scheme,NFSS）。NFSS为字体划分的这些属性各自可以用一个简短的符号来表示，如字体编码有OT1，T1，OML，OMS，OMX，U等；字体族有cmr，cmss，cmtt，cmm，cmsy，cmex等；字体系列有m，b，bx，sb，c等；字体形状有n，it，sl，sc等。<span class="math inline">\(\LaTeX\)</span>提供了更原始的命令来使用这些基本属性：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\fontencoding</span>&#123;&lt;字体编码&gt;&#125;</span><br><span class="line"><span class="keyword">\fontfamily</span>&#123;&lt;字体族&gt;&#125;</span><br><span class="line"><span class="keyword">\fontseries</span>&#123;&lt;字体系列&gt;&#125;</span><br><span class="line"><span class="keyword">\fontshape</span>&#123;&lt;字体形状&gt;&#125;</span><br><span class="line"><span class="keyword">\fontsize</span>&#123;&lt;大小&gt;&#125;&#123;&lt;基本行距&gt;&#125; <span class="comment">% 这里用纯数字，单位默认是 pt</span></span><br></pre></td></tr></table></figure>
<p>使用这些命令后<strong>需要加<code>\selectfont</code>命令使他们生效</strong>。也可以使用<code>\usefont&#123;&lt;编码&gt;&#125;&#123;&lt;族&gt;&#125;&#123;&lt;系列&gt;&#125;&#123;&lt;形状&gt;&#125;</code>一次性选择某个字体。</p>
<h3 id="强调文字">强调文字</h3>
<p><code>\emph</code>命令表示强调，用于把直立体改为意大利体，把意大利体改为直立体。其声明形式为<code>\em</code>。除了使用意大利体表示强调之外你也可以用大写，小型大写或者粗体进行更醒目的强调。</p>
<p><code>\underline</code>命令可以给文字加下划线以达到强调文字的目的，但这个命令作用的下划线部分不能换行，而且不太美观。ulem宏包的<code>\ulem</code>命令解决了这些问题，并且把默认的<code>emph</code>命令也改为使用下划线的方式。如果不希望这样做，可以给ulem宏包加normalem参数，或者使用<code>\normalem</code>和<code>ULforem</code>命令切换两种强调。</p>
<p>除了下划线，ulem宏包也提供了其他一些修饰文字的命令：</p>
<p><img src="/post/LaTeX-text-and-symbols/latex_ulem.jpg"></p>
<h2 id="字号与行距">字号与行距</h2>
<h3 id="字号">字号</h3>
<p>基本的<span class="math inline">\(\LaTeX\)</span>提供了10个简单的声明式命令调整文字大小：</p>
<p><img src="/post/LaTeX-text-and-symbols/latex_fontsize.jpg"></p>
<p>中文字号也可以使用同样的命令设置（字号命令不区分中西文）。不过为了明确字号的具体大小，也可以使用ctex宏包或ctexart等文档类提供的<code>\zihao</code>声明式命令设置。<code>\zihao</code>命令带一个参数，表示中文的字号，可用的范围为<code>0~8</code>及<code>-0~8</code>，如<code>\zihao&#123;0&#125;</code>表示初号，<code>\zihao&#123;-4&#125;</code>表示小四号。</p>
<h3 id="行距">行距</h3>
<p><span class="math inline">\(\LaTeX\)</span>中的行距是与字号直接相关的。在设置字号时，同时也就设置了基本行距为文字大小的1.2倍。行距一词指的是一行文字的基线（base line）到下一行文字的基线的距离。</p>
<p>可以使用命令<code>\linespread&#123;&lt;因子&gt;&#125;</code>来设置实际行距为基本行距的倍数。与许多其他底层字体命令一样，它也在<code>\selectfont</code>命令后生效。对article等标准文档来说，默认值为1，即行距是字号大小的1.2倍；而对ctexart等中文文档来说，默认值为1.3，即行距是字号大小的1.56倍。</p>
<p>setspace宏包提供了一组命令和环境，用于在修改行距因子的同时保证数学公式、浮动体、脚注间距的值也相对合理。基本的命令是<code>\setstretch&#123;&lt;因子&gt;&#125;</code>，大致相当于使用了<code>\linespread</code>后再加<code>\selectfont</code>生效。除此之外，setspace也提供了几个环境用来产生单倍（<code>\singlespacing</code>）、一倍半（<code>onehalfspacing</code>）、双倍（<code>doublespacing</code>）行距，不过要注意其“倍数”的意义并不是<code>\setstretch</code>的行距因子，而是指行距相比字号尺寸的倍数，这也与其他一些软件（如Word）不同。</p>
<h2 id="水平间距与盒子">水平间距与盒子</h2>
<h3 id="水平间距">水平间距</h3>
<p>说到长度，就不能不说说单位。在<span class="math inline">\(\TeX\)</span>中，可以使用的长度单位有以下几种：</p>
<table>
<thead>
<tr class="header">
<th>单位</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>pt</td>
<td>point点（欧美传统排版的长度单位，有时也叫做“磅”）</td>
</tr>
<tr class="even">
<td>pc</td>
<td>pica（1 pc = 12 pt，相当于四号字大小）</td>
</tr>
<tr class="odd">
<td>in</td>
<td>inch英寸（1 in = 72.27 pt）</td>
</tr>
<tr class="even">
<td>bp</td>
<td>big point大点（1 in = 72 bp）</td>
</tr>
<tr class="odd">
<td>cm</td>
<td>centimeter厘米（2.54 cm = 1 in）</td>
</tr>
<tr class="even">
<td>mm</td>
<td>millimeter毫米（10 mm = 1 cm</td>
</tr>
<tr class="odd">
<td>dd</td>
<td>didot point（欧洲大陆使用，1157 dd = 1238 pt）</td>
</tr>
<tr class="even">
<td>cc</td>
<td>cicero（欧洲大陆使用，pica的对应物，1 cc = 12 dd</td>
</tr>
<tr class="odd">
<td>sp</td>
<td>scaled point（<span class="math inline">\(\TeX\)</span>中最小的长度单位，所有长度都是它的倍数，65536 sp = 1 pt）</td>
</tr>
<tr class="even">
<td>em</td>
<td>全身（字号对应的长度，等于一个，也称为“全方”。本义是大写字母M的宽度）</td>
</tr>
<tr class="odd">
<td>ex</td>
<td>x-height（与字号相关，由字体定义。本意是小写字母x的高度）</td>
</tr>
</tbody>
</table>
<p>一个长度必须数字和单位齐全，正确的长度如下所示：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">2cm  1.5pc  -.1cm  +72.dd  1234567sp</span><br></pre></td></tr></table></figure>
<p>在正文中可以使用下面的命令表示不可换行的水平间距：</p>
<p><img src="/post/LaTeX-text-and-symbols/latex_space.jpg"></p>
<p>可以使用下面的命令表示可以换行的水平间距：</p>
<p><img src="/post/LaTeX-text-and-symbols/latex_space_able.jpg"></p>
<p>当上面的命令中没有合适的距离时，可以用<code>\hspace&#123;&lt;距离&gt;&#125;</code>命令来产生指定的水平间距，如<code>\hspace&#123;1cm&#125;</code>将产生长度为1cm的间距。这个命令产生的距离是可以断行的，当它出现在行首时，<span class="math inline">\(\LaTeX\)</span>会忽略它产生的距离，此时可以用带星号的命令<code>\hspace*&#123;&lt;距离&gt;&#125;</code>阻止距离被忽略。</p>
<p><code>\hspace</code>可以产生随内容可伸缩的距离，即所谓胶（glue）或者橡皮长度（rubber length，又称弹性长度）。橡皮长度的语法是：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">&lt;普通长度&gt; plus &lt;可伸长长度&gt; minus &lt;可缩短长度&gt;</span><br></pre></td></tr></table></figure>
<p>单词间的空格、标点后的距离都是橡皮长度，这样才能保证在分行时行末的对齐。</p>
<p>有一种特殊的橡皮长度<code>\fill</code>，它可以从零开始无限延伸。<code>\hfill</code>命令是<code>\hspace&#123;\fill&#125;</code>的简写，还可以使用<code>stretch&#123;&lt;倍数&gt;&#125;</code>产生具有指定“弹力”的橡皮长度，如<code>\stretch&#123;2&#125;</code>就相当于两倍的<code>\fill</code>。<code>\hrulefill</code>、<code>\dotfill</code>与<code>\hfill</code>功能类似，只是中间的内容使用横线或圆点填充。</p>
<p><span class="math inline">\(\LaTeX\)</span>预定义了一些长度变量控制排版的参数，可以通过<code>\setlength</code>命令来设置。比如<code>\setlength&#123;\parindent&#125;&#123;8em&#125;</code>可以将换行产生的首行缩进长度改成8em。还可以用<code>\addtolength</code>命令在长度变量上做累加。</p>
<p>除了预定义的长度变量外还可以使用<code>\newlength</code>命令自定义长度变量：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\newlength</span><span class="keyword">\mylen</span>    <span class="keyword">\setlength</span>&#123;<span class="keyword">\mylen</span>&#125;&#123;2em&#125;</span><br></pre></td></tr></table></figure>
<p>之后就可以使用<code>\mylen</code>命令来产生长度为2em的距离。</p>
<h3 id="盒子">盒子</h3>
<p>盒子（box）是<span class="math inline">\(\TeX\)</span>中的基本处理单位，一个字符、一行文字、一个页面、一张表格在<span class="math inline">\(\TeX\)</span>中都是一个盒子。<span class="math inline">\(\TeX\)</span>可以处在不同的工作模式下，在不同的工作模式下产生不同的盒子。最基本的模式是水平模式（如在组字成行的时候）和垂直模式（如在组行成页的时候），水平模式下把小盒子水平排列组成大盒子，垂直模式下把小盒子垂直排列组成大盒子；此外还有更为复杂的数学模式，此时小盒子会构成复杂的数学结构。通常<span class="math inline">\(\TeX\)</span>根据内容自动切换不同的模式，完成这些复杂的工作；不过也可以使用命令进入指定的模式生成盒子，我们现在只看最简单的水平模式下的盒子。</p>
<p>最简单的命令是<code>\mbox&#123;&lt;内容&gt;&#125;</code>，它产生一个盒子，内容以左右模式排列。可以用它表示不允许断行的内容。<code>\makebox</code>与之类似，但可以带两个可选参数，指定盒子的宽度和对齐方式：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\makebox</span>[&lt;宽度&gt;][&lt;对齐方式&gt;]&#123;&lt;内容&gt;&#125;</span><br></pre></td></tr></table></figure>
<p>对齐参数可取c（中）、l（左）、r（右）、s（分散），默认居中。其中的宽度甚至可以为0，此时的盒子虽然可以有内容，但是没有长度，其后面的内容会与盒子里的内容产生重叠效果。也可以使用<code>\llap&#123;&lt;内容&gt;&#125;</code>和<code>\rlap&#123;&lt;内容&gt;&#125;</code>命令来专门生成重叠的效果，它们分别把参数中的内容向当前位置的左侧和右侧重叠。</p>
<p>命令<code>\fbox</code>和<code>\framebox</code>产生带边框的盒子，语法与<code>\mbox</code>和<code>makebox</code>类似。边框与内容的距离由长度变量<code>\fboxsep</code>控制（默认为3 pt）；边框的粗细则由长度变量<code>\fboxrule</code>控制（默认为0.4 pt）。</p>
<p>想要在文中反复使用同一内容，可以使用<code>\newsavebox</code>命令自定义盒子变量，并使用<code>\sbox</code>或<code>\savebox</code>命令或<code>lrbox</code>环境为其赋值，如</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\newsavebox</span>&#123;<span class="keyword">\mybox</span>&#125;</span><br><span class="line"><span class="keyword">\sbox</span>&#123;<span class="keyword">\mybox</span>&#125;&#123;我想反复使用的文本&#125; </span><br><span class="line"><span class="comment">% 或 \savebox&#123;\mybox&#125;[&lt;宽度&gt;][&lt;对齐&gt;]&#123;我想反复使用的文本&#125;</span></span><br><span class="line"><span class="comment">% 或 \begin&#123;lrbox&#125;&#123;\mybox&#125;我想反复使用的文本\end&#123;lrbox&#125;</span></span><br></pre></td></tr></table></figure>
<p>之后就可以使用<code>\usebox&#123;\mybox&#125;</code>来产生<code>我想反复使用的文本</code>。</p>
<p><span class="math inline">\(\TeX\)</span>中的每个盒子都有其宽度（width）、高度（height）和深度（depth），高度和深度以基点（base）为界：</p>
<p><img src="/post/LaTeX-text-and-symbols/latex_box.jpg"></p>
<p>可以用以下命令把内容的宽度、高度或深度赋值给长度变量：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\settowidth</span>&#123;&lt;长度变量&gt;&#125;&#123;&lt;内容&gt;&#125;</span><br><span class="line"><span class="keyword">\settoheight</span>&#123;&lt;长度变量&gt;&#125;&#123;&lt;内容&gt;&#125;</span><br><span class="line"><span class="keyword">\settodepth</span>&#123;&lt;长度变量&gt;&#125;&#123;&lt;内容&gt;&#125;</span><br></pre></td></tr></table></figure>
<p>也可以用以下命令分别得到盒子的宽度和深度：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\wd</span>&#123;&lt;盒子变量&gt;&#125;    <span class="keyword">\ht</span>&#123;&lt;盒子变量&gt;&#125;    <span class="keyword">\dp</span>&#123;&lt;盒子变量&gt;&#125;</span><br></pre></td></tr></table></figure>
<p>除此之外，在<code>\makebox</code>、<code>\framebox</code>等盒子命令的参数中，也可以使用<code>\width</code>、<code>height</code>、<code>\depth</code>、<code>\totalheight</code>来分别表示盒子内容的自然宽度、高度、深度、高度和深度之和。</p>
<h3 id="例子">例子</h3>
<p>下面给出一些使用长度和盒子的例子：</p>
<p><img src="/post/LaTeX-text-and-symbols/latex_space_and_box_eg.jpg"></p>
]]></content>
      <categories>
        <category>Code</category>
        <category>LaTeX</category>
      </categories>
      <tags>
        <tag>LaTeX</tag>
        <tag>Typesetting</tag>
      </tags>
  </entry>
</search>
